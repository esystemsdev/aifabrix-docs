# AI Fabrix Documentation - Core Rules

You are an AI assistant helping to create and maintain AI Fabrix documentation. Follow these rules when working with documentation files.

## Project Context

- **Product**: AI Fabrix - Enterprise AI platform with Azure-native ISO27k compliance
- **Architecture**: Multi-module platform (Miso, AI Fabrix Core, Flowise, OpenWebUI)
- **Target**: Customer-facing knowledge base with end-user focused content
- **Workflow**: Doc-as-code with Cursor-assisted authoring

## Core Principles

### 1. Customer-Safe Content

- Never expose internal secrets, IDs, or sensitive configuration
- Use placeholder values for internal names/secrets
- Focus on customer value and use cases
- Avoid deployment minutiae - Miso handles provisioning

### 2. End-User Documentation Focus

- **What users can do** (not how it's built)
- **Business workflows** (not technical processes)
- **User outcomes** (not system architecture)
- **Step-by-step guides** (not code examples)
- **Visual examples** (not technical diagrams)
- **User experience** (not developer experience)
- **Business value** (not technical implementation)

### 3. Source-Driven Documentation

- Extract facts directly from code/README/YAML/Bicep files
- Cite file paths inline for editor verification
- Keep documentation synchronized with source code
- Use repository structure as documentation structure

## Documentation Structure

### Module-Based Organization

```yaml
docs/
├── getting-started/          # Getting started guides
├── background/              # Platform overview and background
├── architecture/            # Technical architecture
├── user-guides/             # General user guides
├── api/                     # API documentation
└── support/                 # Support and troubleshooting
```

### Module Ownership

- **Platform (Core)**: Architecture & Security
- **Miso**: Cloud Platform / SRE  
- **Flowise & SDK**: Engineering
- **OpenWebUI**: Product + Engineering

## File Organization

### Repository Structure

```yaml
/docs/                    # Documentation source files (edit here - single source of truth)
/site/                    # Jekyll site configuration
  /_data/                 # Jekyll data files (navigation, etc.)
  /assets/images/         # Brand assets (logos, favicons)
  /_config.yml           # Jekyll configuration
  /_includes/            # Jekyll templates
  /_layouts/             # Jekyll layouts
/scripts/                 # TypeScript build scripts
/temp/                    # Temporary files and migration scripts
/openapi/                 # OpenAPI specifications
/prompts/                 # Cursor prompt templates
/.github/workflows/       # CI/CD pipelines
/tools/                   # Transformers, validators
```

### Metadata Standards

**CRITICAL**: All metadata must be in separate `.yaml` files, NOT in markdown frontmatter.

#### Markdown Files

- **NO frontmatter**: Markdown files should contain only content, no `---` sections
- **Clean content**: Start directly with the content, no metadata blocks
- **Pure markdown**: Only use markdown syntax for content formatting

#### YAML Metadata Files

- **Separate files**: Each `.md` file must have a corresponding `.yaml` file
- **Complete metadata**: All document metadata goes in the `.yaml` file
- **Naming convention**: `document.md` → `document.yaml`

Example structure:

```yaml
docs/
├── getting-started/
│   ├── installation.md          # Pure markdown content
│   ├── installation.yaml        # All metadata here
│   ├── quick-deploy.md          # Pure markdown content
│   └── quick-deploy.yaml        # All metadata here
```

#### Required YAML Metadata Structure

```yaml
title: "[Descriptive title]"
description: "[Brief summary]"
audience: ["end-user", "admin"]
version: "stable"
owner: "[Module owner]"
last_reviewed: "[YYYY-MM-DD]"
layout: "doc"
date: "[YYYY-MM-DD]"
toc: true
custom_links:
  - text: "Module Name"
    url: /docs/module/
    submenu:
      - text: "Document 1"
        url: /docs/module/document1/
      - text: "Document 2"
        url: /docs/module/document2/

# SEO Configuration
seo:
  keywords: ["AI Fabrix", "module", "user-guide"]
  canonical_url: "https://docs.aifabrix.ai/module/document"
  og_image: "images/module-document.png"

# Document360 Specific
document360:
  category: "Module Name"
  visibility: "public"
  searchable: true
  featured: false
  order: 1
```

## Writing Guidelines

### Page Structure

1. **Purpose** (1-2 sentences)
2. **Prerequisites** (environment, permissions)
3. **Steps or Details** (numbered, copy-paste blocks)
4. **Validation** (what "good" looks like)
5. **Troubleshooting** (top 3 issues)
6. **References** (file paths, code links)

### Style Rules

- Use customer-safe wording; no internal secrets/IDs
- Focus on user workflows and business outcomes
- Prefer visual examples (screenshots, diagrams) over code examples
- Use business language, avoid technical jargon
- Call out *operator tasks* vs *platform controls* (ISO alignment)
- Avoid repetition—link to Reference/How-To sections
- Use active voice and clear, concise sentences
- Include step-by-step user guides with clear outcomes

### Technical Standards

- All commands should be copy-pastable
- Include validation steps for each procedure
- Use consistent terminology (AI Fabrix, not "the platform")
- Link to related documentation sections
- Include troubleshooting for common issues

## Cursor Workflow Patterns

### Discovery Prompts

When analyzing repositories, use these patterns:

- "Scan this repository. List: (1) components, (2) configuration files, (3) public interfaces, (4) operational concerns, (5) security-relevant settings."
- "From the table, identify items relevant to Platform Overview and Module pages."

### Content Generation

- Extract facts from source files
- Generate customer-safe documentation focused on end-users
- Include file path citations
- Focus on user workflows and business outcomes
- Create step-by-step guides for common tasks
- Emphasize what users can accomplish, not how systems work

### Quality Assurance

- Validate YAML metadata completeness
- Check for customer-safe content
- Ensure copy-pastable commands
- Verify link integrity
- Confirm audience appropriateness

## Compliance & Security

### ISO-27001 Alignment

- Distinguish between operator tasks and platform controls
- Document security controls and policies
- Maintain audit trail through Git history
- Ensure compliance artifacts are current

### Security Guidelines

- Never expose internal infrastructure details
- Use placeholder values for sensitive data
- Focus on customer-facing security features
- Document security controls and guardrails

## Automation Integration

### CI/CD Pipeline

- Validate markdown and links
- Check YAML metadata completeness
- Ensure customer-safe content
- Generate navigation and versioning
- Deploy to Document360 or Docusaurus

### Quality Gates

- Lint style and structure
- Validate terminology consistency
- Check SEO requirements
- Ensure accessibility standards

## When Working with This Project

1. **Always** check the target audience before writing
2. **Always** include proper YAML metadata files
3. **Always** cite source files when extracting information
4. **Always** validate commands are copy-pastable
5. **Always** use proper markdown formatting (MD040, MD036)
6. **Never** expose internal secrets or sensitive data
7. **Never** skip validation steps in procedures
8. **Always** link to related documentation sections

## File Management & Cleanup

### Temporary Files

- **Location**: All temporary files go in `/temp/` directory
- **Migration Scripts**: Move to `/temp/` after use
- **Status Documents**: Move to `/temp/` when no longer needed
- **Old Templates**: Move to `/temp/` when replaced

### Documentation Structure

- **Source Files**: Edit in `/docs/` directory only (single source of truth)
- **Build Pipeline**: TypeScript scripts process `/docs/` and generate Jekyll-compatible files
- **Jekyll Site**: Reads from processed files and generates HTML in `_site/`
- **Brand Assets**: Manually copied to `/site/assets/images/`
- **Navigation**: Auto-generated by TypeScript scripts in `/site/_data/navigation.yml`

### Cleanup Rules

- **Before Committing**: Check for temporary files in root directory
- **After Migration**: Move migration scripts to `/temp/`
- **After Testing**: Move test files to `/temp/`
- **Keep Root Clean**: Only essential files in root directory

## CRITICAL RULES - NEVER VIOLATE

### Git Commit Rules

- **NEVER commit without explicit user confirmation**
- **ALWAYS ask "Should I commit these changes?" before running git commands**
- **ALWAYS show what will be committed before asking for confirmation**
- **ALWAYS wait for user approval before executing git add/commit/push**
- **If user says no, do NOT proceed with commit**

### Data Protection Rules

- **NEVER delete files without explicit user permission**
- **ALWAYS explain what will be deleted before deletion**
- **ALWAYS ask for confirmation before destructive operations**
- **ALWAYS preserve user's work and changes**

Remember: You're creating customer-facing documentation that helps users succeed with AI Fabrix while maintaining security and compliance standards.
