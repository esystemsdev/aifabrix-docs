# AI Fabrix Documentation - Front-Matter Standards

This file defines the front-matter (YAML metadata) standards for all AI Fabrix documentation files.

## Required Front-Matter Fields

All documentation files in `/docs/` MUST include Jekyll frontmatter (auto-added by dynamic sync):

```yaml
---
layout: doc
title: "Descriptive Title for the Page"
date: "YYYY-MM-DD"
toc: true
---
```

Additional metadata can be added via corresponding `.yaml` files in `/docs/`:

```yaml
title: "Descriptive Title for the Page"
description: "Brief summary of what this page covers (50-160 characters)"
audience: "Exec|Architect|Developer|Security"
version: "stable|next"
owner: "Module owner or team"
last_reviewed: "YYYY-MM-DD"
```

## Field Definitions

### title

- **Required**: Yes
- **Type**: String
- **Format**: Descriptive title that clearly indicates the page content
- **Examples**:
  - "Configure Private Endpoints for AI Fabrix"
  - "AI Fabrix Core - Enterprise Layer Overview"
  - "Upgrade AI Fabrix with Rollback Procedure"

### description

- **Required**: Yes
- **Type**: String
- **Length**: 50-160 characters (SEO optimized)
- **Purpose**: Brief summary for search engines and navigation
- **Examples**:
  - "Learn how to configure private endpoints for secure AI Fabrix deployment"
  - "Overview of AI Fabrix Core enterprise features and capabilities"
  - "Step-by-step guide to upgrade AI Fabrix with rollback procedures"

### audience

- **Required**: Yes
- **Type**: String
- **Values**: One of `Exec`, `Architect`, `Developer`, `Security`
- **Purpose**: Determines content depth and technical level
- **Definitions**:
  - `Exec`: High-level business value, ROI, strategic overview
  - `Architect`: Technical architecture, integration patterns, design decisions
  - `Developer`: Implementation details, code examples, technical procedures
  - `Security`: Security controls, compliance, risk management

### version

- **Required**: Yes
- **Type**: String
- **Values**: `stable` or `next`
- **Purpose**: Indicates content maturity and target audience
- **Definitions**:
  - `stable`: Production-ready, customer-facing content
  - `next`: Preview, upcoming features, experimental content

### owner

- **Required**: Yes
- **Type**: String
- **Purpose**: Identifies responsible team for content maintenance
- **Values**: Module owners as defined in structure.md
  - `Platform (Core)`: Architecture & Security
  - `Miso`: Cloud Platform / SRE
  - `Flowise & SDK`: Engineering
  - `OpenWebUI`: Product + Engineering

### last_reviewed

- **Required**: Yes
- **Type**: String
- **Format**: `YYYY-MM-DD`
- **Purpose**: Tracks content freshness for recertification
- **Example**: `2024-01-15`

## Optional Front-Matter Fields

### doc_status

- **Required**: No
- **Type**: String
- **Values**: `latest`, `deprecated`, `preview`
- **Purpose**: Versioning without D360 "Versions" feature
- **Usage**: Controls banner display and navigation

### release

- **Required**: No
- **Type**: String
- **Format**: `YYYY-MM`
- **Purpose**: Associates content with specific release
- **Example**: `2024-01`

### tags

- **Required**: No
- **Type**: Array of strings
- **Purpose**: Categorization and search
- **Examples**: `["getting-started", "azure", "security"]`

### prerequisites

- **Required**: No
- **Type**: Array of strings
- **Purpose**: Lists required knowledge or access
- **Examples**: `["Azure subscription", "Entra ID admin access"]`

### related_pages

- **Required**: No
- **Type**: Array of strings
- **Purpose**: Links to related documentation
- **Examples**: `["/docs/architecture/reference-azure", "/docs/security/overview"]`

## Front-Matter Validation Rules

### Required Field Validation

```yaml
# All these fields must be present and non-empty
required_fields:
  - title
  - description
  - audience
  - version
  - owner
  - last_reviewed
```

### Content Validation Rules

```yaml
validation_rules:
  title:
    min_length: 10
    max_length: 100
    pattern: "^[A-Za-z0-9\\s\\-\\:]+$"
  
  description:
    min_length: 50
    max_length: 160
    
  audience:
    allowed_values: ["Exec", "Architect", "Developer", "Security"]
    
  version:
    allowed_values: ["stable", "next"]
    
  last_reviewed:
    pattern: "^\\d{4}-\\d{2}-\\d{2}$"
```

### SEO Validation

```yaml
seo_requirements:
  title:
    unique: true  # No duplicate titles across all pages
    keyword_density: "Include primary keyword"
    
  description:
    keyword_inclusion: "Include primary keyword"
    call_to_action: "Include action verb when appropriate"
```

## Front-Matter Templates

### Module Overview Page

```yaml
---
title: "[Module Name] - Overview"
description: "Comprehensive overview of [Module Name] capabilities and features"
audience: "Architect"
version: "stable"
owner: "[Module Owner]"
last_reviewed: "YYYY-MM-DD"
tags: ["overview", "module", "[module-name]"]
related_pages: ["/docs/platform/overview", "/docs/architecture/reference-azure"]
---
```

### How-To Guide

```yaml
---
title: "How to [Action] in AI Fabrix"
description: "Step-by-step guide to [action] with validation and troubleshooting"
audience: "Developer"
version: "stable"
owner: "[Module Owner]"
last_reviewed: "YYYY-MM-DD"
prerequisites: ["Azure subscription", "AI Fabrix access"]
tags: ["how-to", "procedures", "[category]"]
related_pages: ["/docs/reference/configuration", "/docs/troubleshooting/common-issues"]
---
```

### Architecture Page

```yaml
---
title: "[Component] Architecture"
description: "Technical architecture and design patterns for [component]"
audience: "Architect"
version: "stable"
owner: "Platform (Core)"
last_reviewed: "YYYY-MM-DD"
tags: ["architecture", "design", "[component]"]
related_pages: ["/docs/architecture/reference-azure", "/docs/security/overview"]
---
```

### Security & Compliance Page

```yaml
---
title: "[Security Topic] - Security & Compliance"
description: "Security controls and compliance requirements for [topic]"
audience: "Security"
version: "stable"
owner: "Platform (Core)"
last_reviewed: "YYYY-MM-DD"
tags: ["security", "compliance", "iso27001"]
related_pages: ["/docs/security/overview", "/docs/compliance/controls-map"]
---
```

### SDK Documentation

```yaml
---
title: "[SDK Topic] - Developer Guide"
description: "Developer guide for [SDK topic] with examples and best practices"
audience: "Developer"
version: "stable"
owner: "Flowise & SDK"
last_reviewed: "YYYY-MM-DD"
prerequisites: ["Node.js", "TypeScript knowledge"]
tags: ["sdk", "developer", "api"]
related_pages: ["/docs/sdk/quickstart", "/docs/sdk/examples"]
---
```

## Versioning Strategy

### Version Banners

Based on `doc_status` field:

```yaml
# No banner for latest content
doc_status: "latest"

# Deprecated content banner
doc_status: "deprecated"
# Banner: "This article refers to an older release. See: <link to Latest>"

# Preview content banner  
doc_status: "preview"
# Banner: "Preview features—subject to change."
```

### Release Association

Use `release` field for navigation:

```yaml
release: "2024-01"  # Creates navigation: "Releases → 2024-01"
```

## Quality Assurance

### Pre-Commit Validation

```bash
# Validate front-matter completeness
npm run validate:frontmatter

# Check for required fields
npm run check:required-fields

# Validate SEO requirements
npm run check:seo
```

### Automated Checks

- Required fields present and non-empty
- Valid date format for `last_reviewed`
- Audience value from allowed list
- Version value from allowed list
- Owner matches module ownership
- Title uniqueness across all pages
- Description length within SEO bounds

## Best Practices

1. **Always include required fields** - Missing fields cause build failures
2. **Keep descriptions concise** - 50-160 characters for SEO
3. **Choose appropriate audience** - Determines content depth
4. **Update last_reviewed** - Track content freshness
5. **Use consistent tags** - Enable better categorization
6. **Link related pages** - Improve navigation and discoverability
7. **Validate before commit** - Run validation scripts locally

## Common Mistakes to Avoid

- Missing required fields
- Invalid date format for `last_reviewed`
- Audience not from allowed values
- Description too short or too long
- Duplicate titles across pages
- Outdated `last_reviewed` dates
- Inconsistent tag naming
- Missing related page links

Remember: Front-matter is metadata that drives navigation, search, and content management. Proper front-matter ensures your documentation is discoverable, maintainable, and user-friendly.
