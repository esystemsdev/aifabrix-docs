# Repository Documentation Generation Rules

## Purpose

This file defines rules for generating customer-facing documentation from internal repository documentation. The goal is to transform internal technical documentation into customer-safe, accessible documentation while maintaining accuracy and completeness.

## Core Principles

### 1. Customer Safety First

- **Never expose internal information**: Remove internal URLs, credentials, internal team references
- **Use placeholder values**: Replace internal names with generic examples
- **Focus on customer value**: Emphasize what customers can do, not internal processes
- **Remove deployment minutiae**: Skip internal deployment details that customers don't need

### 2. Content Transformation

- **Simplify technical language**: Make complex concepts accessible to target audience
- **Add context and examples**: Provide practical examples and use cases
- **Structure for customers**: Organize content by customer workflows, not internal architecture
- **Maintain accuracy**: Preserve technical accuracy while improving accessibility

### 3. Documentation Standards

- **Consistent structure**: Follow established documentation patterns
- **Complete metadata**: Include all required YAML metadata fields
- **Cross-references**: Link to related customer-facing documentation in `/site/_docs/`
- **Audience targeting**: Tailor content depth to target audience (executive, architect, developer, user)

## Repository Documentation Mapping

### Source Repository Analysis

When analyzing a source repository, identify:

1. **Documentation Structure**
   - Available documentation files and their purposes
   - Internal vs customer-facing content
   - Technical depth and complexity

2. **Content Categories**
   - Architecture and design documents
   - User guides and tutorials
   - API references and technical specifications
   - Configuration and deployment guides

3. **Customer Value Extraction**
   - What customers can actually do with the system
   - Key features and capabilities
   - Integration points and APIs
   - Configuration options and customization

### Content Transformation Rules

#### Architecture Documentation

- **Source**: Internal architecture docs, design documents
- **Target**: Customer-facing architecture overviews
- **Transform**: Remove internal implementation details, focus on customer benefits
- **Add**: Use cases, integration scenarios, scalability information

#### User Guides

- **Source**: Internal user guides, admin documentation
- **Target**: Customer user guides and tutorials
- **Transform**: Simplify workflows, remove internal references
- **Add**: Prerequisites, validation steps, troubleshooting

#### API Documentation

- **Source**: Internal API references, technical specifications
- **Target**: Customer API documentation
- **Transform**: Remove internal endpoints, focus on customer APIs
- **Add**: Authentication examples, usage scenarios, SDK integration

#### Getting Started Guides

- **Source**: Internal setup guides, deployment documentation
- **Target**: Customer quick start guides
- **Transform**: Remove internal deployment details, focus on customer setup
- **Add**: Prerequisites, validation steps, next steps

## Content Generation Process

### 1. Source Analysis

```yaml
Analyze the source repository documentation:
- Identify documentation files and their purposes
- Extract key technical information
- Identify customer-relevant content
- Note internal references to remove
```

### 2. Content Transformation

```yaml
Transform internal content to customer-facing:
- Remove internal URLs, credentials, team references
- Simplify technical language for target audience
- Add customer context and examples
- Structure content by customer workflows
```

### 3. Quality Assurance

```yaml
Ensure customer safety and quality:
- Verify no internal information is exposed
- Check technical accuracy is maintained
- Validate content is accessible to target audience
- Confirm cross-references are correct
```

### 4. Metadata Generation

```yaml
Generate complete YAML metadata:
- Set appropriate audience targeting
- Add relevant tags and keywords
- Configure SEO settings
- Set Document360 category and visibility
```

## Repository-Specific Rules

### aifabrix-miso Repository

- **Focus**: Platform functionality, application management, deployment
- **Customer APIs**: Miso REST API, application lifecycle, monitoring
- **Remove**: Internal token service, admin interfaces, internal deployment
- **Add**: Customer use cases, integration examples, troubleshooting

### aifabrix-core Repository

- **Focus**: Core platform capabilities, AI services, data management
- **Customer APIs**: Core service APIs, AI model management, data APIs
- **Remove**: Internal service communication, admin interfaces
- **Add**: AI use cases, data integration examples, performance guidance

### aifabrix-flowise Repository

- **Focus**: Workflow automation, AI agent creation, integration
- **Customer APIs**: Flowise API, workflow management, agent configuration
- **Remove**: Internal deployment, admin interfaces
- **Add**: Workflow examples, agent templates, integration guides

### aifabrix-openwebui Repository

- **Focus**: User interface, chat functionality, model management
- **Customer APIs**: OpenWebUI API, chat management, model configuration
- **Remove**: Internal deployment, admin interfaces
- **Add**: UI customization, chat examples, model integration

### aifabrix-plugins Repository

- **Focus**: Plugin development, extension capabilities, integration
- **Customer APIs**: Plugin API, extension management, custom integrations
- **Remove**: Internal plugin development, admin interfaces
- **Add**: Plugin examples, extension guides, integration tutorials

### aifabrix-mori Repository (Internal Only)

- **Focus**: Backend services, subscription management, billing
- **Customer APIs**: Subscription API, billing management, service status
- **Remove**: Internal service communication, admin interfaces
- **Add**: Subscription management, billing examples, service monitoring

## Content Safety Checklist

### Before Publishing

- [ ] No internal URLs or credentials exposed
- [ ] No internal team names or references
- [ ] No internal deployment details
- [ ] No sensitive configuration information
- [ ] All examples use placeholder values
- [ ] Content focuses on customer value
- [ ] Technical accuracy is maintained
- [ ] Content is accessible to target audience

### Content Quality Checklist

- [ ] Clear, actionable language
- [ ] Complete examples and use cases
- [ ] Proper cross-references
- [ ] Consistent terminology
- [ ] Complete YAML metadata
- [ ] Appropriate audience targeting
- [ ] SEO optimization
- [ ] Document360 configuration

## Examples

### Good Transformation

**Source**: "The Miso controller uses internal token service at mori.aifabrix.ai for authentication"
**Target**: "AI Fabrix uses OIDC authentication for secure API access"

### Bad Transformation

**Source**: "The Miso controller uses internal token service at mori.aifabrix.ai for authentication"
**Target**: "The Miso controller uses internal token service at mori.aifabrix.ai for authentication" (exposes internal URL)

### Good Addition

**Source**: "POST /applications"
**Target**: "POST /applications - Deploy a new application to AI Fabrix with configuration options"

### Bad Addition

**Source**: "POST /applications"
**Target**: "POST /applications - Deploy a new application to AI Fabrix using internal deployment pipeline" (exposes internal process)

## Integration with AI Documentation Workflow

This rule file integrates with the main AI documentation workflow:

1. **Repository Analysis**: Use these rules to analyze source repositories
2. **Content Generation**: Apply transformation rules during content generation
3. **Quality Assurance**: Use safety and quality checklists for validation
4. **Metadata Generation**: Ensure complete YAML metadata is generated

## Maintenance

- **Regular Review**: Update rules based on new repositories and content types
- **Customer Feedback**: Incorporate customer feedback on documentation quality
- **Security Review**: Regularly review content safety guidelines
- **Technical Updates**: Update technical accuracy as systems evolve
