# AI Fabrix Documentation - Cursor Prompt Templates

This file contains ready-to-use prompt patterns for generating AI Fabrix documentation using Cursor. These prompts follow the "Seek from Source, Build the Docs" workflow.

## Repository Discovery Prompts

### A. Initial Repository Scan

```text
Scan this repository. List: (1) components, (2) configuration files (env/Key Vault/bicep), (3) public interfaces (APIs/CLI), (4) operational concerns (health checks, logs), (5) security-relevant settings. Output a table with file paths and 1–2 line descriptions.
```

### B. Platform Overview Extraction

```text
From the table, identify items relevant to the Platform Overview and Module pages. Summarize as bullets with repo file references.
```

## Module Documentation Prompts

### C. Module Page Generation

```text
From these files: [paste list/paths], draft a customer-safe Module page with sections: *What it is* · *What it does* · *Why it matters* · *Key capabilities* · *Who uses it*. Cite file paths inline for editor verification. Exclude deployment minutiae—Miso handles that.
```

### D. Module-Specific Prompts

#### Miso (Provisioning & Lifecycle)

```text
Analyze the Miso repository structure and configuration files. Create a Module page explaining:
- What Miso is (provisioning and lifecycle management)
- Key capabilities (deployment, scaling, monitoring)
- Who uses it (SRE, DevOps teams)
- Integration with other AI Fabrix modules
Keep content customer-safe and focus on business value.
```

#### AI Fabrix Core (Enterprise Layer)

```text
From the core repository, extract information about:
- Enterprise identity and governance features
- Metadata fabric capabilities
- Connector framework
- Observability and monitoring
Create a comprehensive Module page that explains the enterprise layer without exposing internal implementation details.
```

#### Flowise (Visual Orchestration)

```text
Analyze Flowise extensions and configuration. Document:
- Visual workflow creation capabilities
- Integration patterns with AI Fabrix Core
- Use cases for business users
- Technical capabilities for developers
Focus on the orchestration value proposition.
```

#### OpenWebUI (Enterprise Chat/Workbench)

```text
From OpenWebUI configuration and extensions, create documentation covering:
- Enterprise chat capabilities
- Knowledge integration features
- Workbench functionality
- Security and compliance features
Emphasize enterprise-grade features and integrations.
```

## How-To Guide Prompts

### E. Procedure Documentation

```text
From `scripts/` and CI workflows, derive a step-by-step How-To titled '[Procedure Name]'. Sections: *Prereqs*, *Steps*, *Validation*, *Rollback*, *Gotchas*. Replace internal names/secrets with placeholders. Keep commands copy-pastable.
```

### F. Common How-To Templates

#### Upgrade with Rollback

```text
From upgrade scripts and CI workflows, create a comprehensive upgrade guide including:
- Prerequisites and pre-upgrade checks
- Step-by-step upgrade procedure
- Validation steps to confirm success
- Rollback procedure if issues occur
- Common gotchas and troubleshooting
Use placeholder values for internal configuration.
```

#### Configure Private Endpoints

```text
From Bicep templates and networking configuration, create a guide for:
- Prerequisites (DNS, certificates, networking)
- Step-by-step private endpoint configuration
- Validation of connectivity
- Troubleshooting common issues
- Security considerations
```

#### Add SharePoint Connector

```text
From connector code and configuration examples, document:
- Prerequisites and permissions
- Configuration steps
- Testing and validation
- Common configuration issues
- Security and compliance notes
```

## Architecture Documentation Prompts

### G. Architecture Page Generation

```text
Read `infra/bicep/*` and `env/*.example`. Produce an Architecture page: *Networking*, *Identity*, *Data*, *Compute*, *Observability*. For each, list key resources and why they exist. Add a Mermaid diagram from the inferred topology. Keep internal IDs redacted.
```

### H. Architecture-Specific Prompts

#### Reference Architecture

```text
From Bicep templates and infrastructure code, create a comprehensive architecture overview including:
- High-level system architecture
- Component relationships
- Data flow diagrams
- Security boundaries
- Scalability considerations
Use Mermaid diagrams for visual representation.
```

#### Networking & Identity

```text
Document the networking and identity architecture including:
- Private endpoint configuration
- Azure Front Door setup
- Entra ID integration
- Network security groups
- DNS and certificate management
Include configuration examples and security considerations.
```

#### Data Layer Architecture

```text
From database and storage configuration, document:
- PostgreSQL and pgvector setup
- Redis configuration
- Storage account structure
- Data retention policies
- Backup and recovery procedures
```

## SDK Documentation Prompts

### I. SDK Concepts Documentation

```text
Analyze `sdk/src/**/*.ts`. Generate a SDK Concepts page explaining node structure, dynamic fields, dependent pickers, and output schemas. Include minimal code snippets from files and a small end-to-end example connector.
```

### J. SDK-Specific Prompts

#### SDK Quickstart

```text
Create a comprehensive SDK quickstart guide including:
- Prerequisites and setup
- Scaffold → run → test workflow
- Basic node creation example
- Dynamic field configuration
- Testing and validation steps
```

#### Auth & Secrets Management

```text
Document authentication and secrets management including:
- Key Vault integration
- Authentication flows
- Secret management best practices
- Security considerations
- Configuration examples
```

#### Publishing to Fabrix

```text
From publishing workflows and versioning, create documentation for:
- Versioning strategy
- Publishing process
- Quality gates
- Rollback procedures
- Best practices
```

## RAG & Metadata Fabric Prompts

### K. RAG Documentation

```text
Scan `connectors/*` and `core/metadata/*`. Produce 'RAG & Metadata Fabric' explaining how metadata filters are applied at retrieval time. Include sequence diagram and a table of supported metadata fields. Keep it customer-safe.
```

### L. RAG-Specific Prompts

#### Metadata Fabric Overview

```text
Document the metadata fabric including:
- Metadata structure and types
- Filtering capabilities
- Retrieval patterns
- Performance considerations
- Integration with connectors
```

#### Connector Catalog

```text
Create a comprehensive connector catalog including:
- Available connectors
- Configuration requirements
- Use cases and examples
- Security considerations
- Troubleshooting guides
```

## Security & Compliance Prompts

### M. Security Documentation

```text
From security configuration and policies, create security documentation covering:
- Security overview and principles
- ISO-27001 control mapping
- Policy and guardrails
- Compliance artifacts
- Security best practices
Keep content customer-safe and focus on customer-facing security features.
```

### N. Compliance-Specific Prompts

#### Controls Map

```text
Document the ISO-27001 controls mapping including:
- Control categories
- Implementation details
- Evidence collection
- Audit procedures
- Continuous monitoring
```

#### Policy & Guardrails

```text
From policy configuration and guardrail implementation, document:
- Prompt and output policies
- Egress controls
- Data handling policies
- Access controls
- Monitoring and alerting
```

## Operations Documentation Prompts

### O. SRE Documentation

```text
From operational scripts and monitoring configuration, create SRE documentation including:
- Daily operational procedures
- Monitoring and alerting
- Backup and restore procedures
- Change management processes
- Capacity planning
```

### P. Operations-Specific Prompts

#### Runbook Creation

```text
Create comprehensive runbooks for:
- Daily health checks
- Incident response procedures
- Maintenance windows
- Performance optimization
- Troubleshooting guides
```

#### Backup/Restore Procedures

```text
Document backup and restore procedures including:
- Backup strategies and schedules
- Restore procedures
- Disaster recovery planning
- Testing procedures
- Monitoring and validation
```

## Quality Assurance Prompts

### Q. Content Validation

```text
Review this documentation for:
- Customer-safe content (no internal secrets)
- Proper front-matter completion
- Copy-pastable commands
- Link integrity
- Audience appropriateness
- Technical accuracy
```

### R. SEO and Accessibility

```text
Optimize this documentation for:
- SEO best practices (title, description, keywords)
- Accessibility standards (headings, alt text)
- Readability (Flesch-Kincaid score)
- Link structure and navigation
- Mobile responsiveness
```

## Usage Instructions

1. **Copy the relevant prompt** from this file
2. **Paste it into Cursor** with your specific context
3. **Modify placeholders** with actual file paths or specific requirements
4. **Review output** for customer-safe content and accuracy
5. **Validate** against front-matter standards and style guidelines

## Best Practices

- Always start with repository discovery prompts
- Use specific file paths when available
- Validate output against customer-safe guidelines
- Include file citations for verification
- Test copy-pastable commands
- Review for audience appropriateness

Remember: These prompts are designed to extract facts from source code and create customer-facing documentation that helps users succeed with AI Fabrix.
