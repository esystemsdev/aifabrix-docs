# AI Documentation Generation Prompts

## Repository Analysis Prompt

```text
Analyze the following source repository documentation and identify customer-facing content:

Repository: {repository_name}
Path: {source_path}
Content: {source_content}

Instructions:
1. Identify customer-facing information (architecture, APIs, user guides, security)
2. Flag internal content to exclude (plans, development specs, internal reports)
3. Extract key information for documentation generation
4. Identify target audience (executive, architect, developer, user, security)
5. Suggest appropriate documentation structure and metadata

Exclude these internal folders:
- docs/plans/
- docs/development/
- docs/reports/
- Internal specifications and implementation details
- Project management and task documentation

Focus on:
- System architecture and design
- User guides and tutorials
- API references and examples
- Security and compliance information
- Configuration and deployment guides
```

## Content Generation Prompt

```text
Generate customer-facing documentation based on the following source content:

Source Repository: {repository_name}
Source File: {source_file_path}
Target Audience: {target_audience}
Documentation Type: {doc_type}

Source Content:
{source_content}

Instructions:
1. Transform internal content to customer-safe language
2. Remove internal references, IDs, and sensitive information
3. Use customer-facing terminology and clear explanations
4. Maintain technical accuracy while ensuring accessibility
5. Follow established documentation structure and patterns
6. Create appropriate YAML metadata

Customer-Safe Transformations:
- Replace internal IDs with descriptive placeholders
- Use "your organization" instead of internal references
- Explain technical concepts in customer-appropriate terms
- Focus on customer value and use cases
- Remove internal implementation details

Required YAML Metadata:
- title: Clear, descriptive title
- description: Brief summary for search and navigation
- audience: Target audience (executive, architect, developer, user, security)
- tags: Relevant keywords for categorization
- labels: Additional categorization labels
- related_articles: Links to related documentation
- seo: SEO configuration (keywords, canonical_url, og_image)
- document360: Document360 specific settings

Generate both the Markdown content and corresponding YAML metadata file.
```

## Architecture Documentation Prompt

```text
Generate architecture documentation from source content:

Source: {source_repository}/docs/architecture/{file}
Target: docs/architecture/{file}
Audience: architect, developer

Focus Areas:
- System components and their relationships
- Data flow and integration points
- Security architecture and controls
- Scalability and performance considerations
- Deployment and infrastructure requirements

Structure:
1. Overview and purpose
2. System architecture diagram (Mermaid)
3. Core components
4. Data flow and integrations
5. Security considerations
6. Scalability and performance
7. Deployment requirements
8. Related documentation

Ensure:
- Customer-safe language and examples
- Clear technical explanations
- Proper cross-references to related docs
- Complete YAML metadata
```

## User Guide Generation Prompt

```text
Generate user guide documentation from source content:

Source: {source_repository}/docs/user-guides/{file}
Target: docs/user-guides/{file}
Audience: user, developer

Focus Areas:
- Step-by-step procedures
- Screenshots and examples
- Troubleshooting and common issues
- Best practices and tips
- Related workflows and integrations

Structure:
1. Purpose and overview
2. Prerequisites
3. Step-by-step instructions
4. Examples and screenshots
5. Troubleshooting
6. Best practices
7. Related documentation

Ensure:
- Clear, actionable instructions
- Customer-safe examples and screenshots
- Comprehensive troubleshooting section
- Complete YAML metadata
```

## API Documentation Prompt

```text
Generate API documentation from source content:

Source: {source_repository}/docs/{api_file}
Target: docs/api/{service_name}.md
Audience: developer

Focus Areas:
- Authentication and authorization
- Endpoint descriptions and parameters
- Request/response examples
- Error handling and status codes
- Rate limiting and best practices

Structure:
1. Overview and authentication
2. Base URL and headers
3. Endpoints (grouped by functionality)
4. Request/response examples
5. Error handling
6. Rate limiting and quotas
7. SDKs and libraries
8. Related documentation

Ensure:
- Complete endpoint documentation
- Working code examples
- Clear error handling information
- Customer-safe authentication examples
- Complete YAML metadata
```

## Security Documentation Prompt

```text
Generate security documentation from source content:

Source: {source_repository}/docs/{security_file}
Target: docs/security/{topic}.md
Audience: security, architect, administrator

Focus Areas:
- Authentication and authorization models
- RBAC and permission systems
- Compliance and regulatory requirements
- Security best practices
- Audit and monitoring capabilities

Structure:
1. Security overview
2. Authentication methods
3. Authorization and RBAC
4. Compliance requirements
5. Security best practices
6. Audit and monitoring
7. Incident response
8. Related documentation

Ensure:
- Customer-safe security information
- Clear compliance guidance
- Actionable security recommendations
- Complete YAML metadata
```

## Content Validation Prompt

```text
Validate generated documentation for quality and customer safety:

Generated Content: {generated_content}
YAML Metadata: {yaml_metadata}
Source: {source_repository}

Validation Checklist:
1. Technical Accuracy
   - [ ] Information is technically correct
   - [ ] Examples work as described
   - [ ] No outdated or incorrect information

2. Customer Safety
   - [ ] No internal references or sensitive information
   - [ ] Customer-appropriate language and examples
   - [ ] No internal IDs, secrets, or proprietary information

3. Structure and Quality
   - [ ] Follows established documentation patterns
   - [ ] Clear, actionable language
   - [ ] Proper headings and organization
   - [ ] Complete cross-references

4. YAML Metadata
   - [ ] All required fields present
   - [ ] Appropriate audience targeting
   - [ ] Relevant tags and labels
   - [ ] Complete SEO configuration

5. Consistency
   - [ ] Consistent terminology with other docs
   - [ ] Appropriate content depth for audience
   - [ ] Proper linking to related documentation

Provide validation results and suggest improvements if needed.
```

## Cross-Repository Analysis Prompt

```text
Analyze documentation across multiple repositories for consistency and completeness:

Repositories: {repository_list}
Topic: {documentation_topic}

Instructions:
1. Identify documentation gaps across repositories
2. Find inconsistencies in terminology or approach
3. Suggest unified documentation structure
4. Recommend content consolidation or cross-references
5. Ensure comprehensive coverage of the topic

Analysis Areas:
- Content completeness and coverage
- Terminology consistency
- Structural alignment
- Cross-repository dependencies
- Audience appropriateness
- Customer safety and relevance

Provide recommendations for:
- Content consolidation
- Terminology standardization
- Structural improvements
- Cross-repository linking
- Documentation gaps to address
```

## Change Detection Prompt

```text
Analyze changes in source repository documentation:

Repository: {repository_name}
Changed Files: {changed_files}
Change Type: {change_type} (new, modified, deleted)

Instructions:
1. Identify customer-facing changes that require documentation updates
2. Assess impact on existing customer documentation
3. Determine if new documentation is needed
4. Suggest documentation updates or new content
5. Prioritize changes by customer impact

Change Analysis:
- New features or capabilities
- Architecture or design changes
- API modifications or additions
- Security or compliance updates
- User workflow changes
- Configuration or deployment changes

Provide recommendations for:
- Documentation updates needed
- New documentation to create
- Priority level for changes
- Impact on related documentation
```

## Quality Assurance Prompt

```text
Perform quality assurance review of generated documentation:

Document: {document_path}
Content: {document_content}
Metadata: {yaml_metadata}

QA Checklist:
1. Content Quality
   - [ ] Clear and actionable language
   - [ ] Appropriate technical depth for audience
   - [ ] Complete and accurate information
   - [ ] Proper examples and illustrations

2. Customer Safety
   - [ ] No internal references or sensitive information
   - [ ] Customer-appropriate examples and scenarios
   - [ ] No proprietary or confidential information
   - [ ] Proper placeholder usage for sensitive data

3. Structure and Organization
   - [ ] Logical flow and organization
   - [ ] Proper headings and hierarchy
   - [ ] Complete cross-references
   - [ ] Consistent formatting and style

4. Metadata Completeness
   - [ ] All required YAML fields present
   - [ ] Appropriate audience targeting
   - [ ] Relevant tags and categorization
   - [ ] Complete SEO configuration

5. Integration
   - [ ] Proper linking to related documentation
   - [ ] Consistent terminology with other docs
   - [ ] Appropriate content depth and scope
   - [ ] Ready for Document360 synchronization

Provide QA results and recommendations for improvement.
```

## Usage Instructions

1. **Select appropriate prompt** based on documentation type and purpose
2. **Fill in template variables** with specific repository and file information
3. **Use with Cursor** to generate customer-facing documentation
4. **Validate generated content** using the validation and QA prompts
5. **Review and approve** before updating master documentation
6. **Sync to Document360** using the established sync process

Remember: Always validate generated content for customer safety and technical accuracy before publishing.
